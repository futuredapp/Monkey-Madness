#!/bin/bash

############ EXIT TRAP

testing=false;
trap 'ctrlc' 1 2 3 6 15

ctrlc()
{
if $testing; then
   adb shell ps | awk '/com\.android\.commands\.monkey/ { system("adb shell kill " $2) }' >/dev/null 2>&1
   echo
   echo "Monkey shot down! Your device is safe now."
   echo
   if [[ $api -ge 23 ]] ; then #android >=6
      adb shell am task lock stop >/dev/null 2>&1
      echo "App unlocked from screen."
   fi
   exit
else
   exit
fi
}

############ PRE-TEST CHECKS

check_device()
{
#nice intro
echo
echo "Monkey Madness - stress test";
echo "---------------------------";

#check android api ver
api=$(adb shell getprop ro.build.version.sdk);
api=${api//[!0-9]/};
if ! ([[ $api -ge 21 ]]); then
   echo "Sorry this script supports only API 21+"
   echo "Aborting..."
   echo
   exit
fi

#check if any device is connected
if ! ([[ $(adb devices -l)  == *"model"* ]]); then
   echo "No device connected, aborting..."
   echo
   exit
fi

#check if more devices connected
if ([[ $(adb devices -l | wc -l) -gt 3 ]]); then
   echo "More than one device detected, connect only one to continue..."
fi
while ([[ $(adb devices -l | wc -l) -gt 3 ]]); do 
   sleep 1; 
done

#check if display is on
if ([[ $(adb shell dumpsys window windows | grep mCurrentFocus | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev) == *"StatusBar}"* || $(adb shell dumpsys window windows | grep mCurrentFocus | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev) == *"mCurrentFocus=null"* ]]); then
   echo "Turn screen on and unlock device to continue..."
fi
while ([[ $(adb shell dumpsys window windows | grep mCurrentFocus | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev) == *"StatusBar}"* || $(adb shell dumpsys window windows | grep mCurrentFocus | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev) == *"mCurrentFocus=null"*  ]]); do 
   sleep 1; 
done

#get app package name
app=$(adb shell dumpsys window windows | grep mCurrentFocus | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev)

#check if system package
if ([[ $(adb shell dumpsys window windows | grep mCurrentFocus | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev) == *"android"* ]]); then
   echo "App appears to be system package, open your app to continue...";
   while ([[ $(adb shell dumpsys window windows | grep mCurrentFocus | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev) == *"android"* ]]); do 
      sleep 2;     
   done
   sleep 3;
   app=$(adb shell dumpsys window windows | grep mCurrentFocus | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev) 
fi

#check if launcher
if ([[ $(adb shell dumpsys window windows | grep mCurrentFocus | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev) == *"launcher"* ]]); then
   echo -n "App appears to be launcher, are you sure you want to continue? ";
   read force;
   if [[ $force == *"n"* ]]; then
      echo "Aborting...";
      exit;
   else
      app=$(adb shell dumpsys window windows | grep mCurrentFocus | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev) 
   fi
fi

#echo package name of tested app
echo "Foreground app package name: "$app
}

############ RUN TEST

run_test()
{
#make folder if it doesnt exist
if ! [ -d $PWD/$app ] ; then
   mkdir $PWD/$app
fi

#check/set number input events
events=0
if [ -z "$1" ] || (( $1<1 )); then
   until [[ $events =~ ^-?[0-9]+$ ]] && [ $events -gt 0 ]; do
      echo -n "Please specify number of input events: ";
      read events;
   done
else
   echo "Input events incoming: "$1;
   events=$1;
fi

#set seed
if ! [ -z "$2" ]; then
   echo "Seed set to: "$2;
   seed=$2
else
   seed=$RANDOM
   echo "Seed not specified! Setting random: "$seed
fi

#checks passed
logname="$app-`date +%Y-%m-%d-%H-%M-%S`.log"

#create log
echo "Android APP stress test "$ver >> $PWD/$app/$logname
echo "Test with seed "$seed "and "$events" input events started at: `date +%Y-%m-%d-%H-%M-%S`" >> $PWD/$app/$logname
echo "---------------------------" >> $PWD/$app/$logname

#lock screen
task_id=$(adb shell dumpsys activity | grep mFocusedActivity | rev) #get focused activity info and reverse it
set $task_id #breaks task_id into $1 $2 ...
task_id=$1 #saves $1 into task_id
task_id=$(echo $task_id | rev) # reverse string back
task_id=${task_id//[!0-9]/} #strip non numeric chars from task_id

#api specific locking
if [[ $api -ge 23 ]] ; then #android >=6
   adb shell am task lock $task_id >/dev/null 2>&1 #lock current app to prevent monkey escape
   adb shell input tap 865 1620 #ugly hardcoded tap, substitute by (x,y) of your confirm button
elif [[ $api -eq 22 ]] ; then #android 5.1
   adb shell am lock-task $task_id >/dev/null 2>&1 #lock current app to prevent monkey escape
   adb shell input tap 865 1620 #ugly hardcoded tap, substitute by (x,y) of your confirm button
elif [[ $api -eq 21 ]] ; then #android 5 
   adb shell am lock-task $task_id >/dev/null 2>&1 #lock current app to prevent monkey escape
   adb shell input keyevent 22
   adb shell input keyevent 22
   adb shell input keyevent 66
fi

echo "App locked to screen."

#run test
echo "Testing..."
testing=true;
adb shell monkey -p $app -s $seed --pct-syskeys 0 --pct-anyevent 0 --monitor-native-crashes $events >> $PWD/$app/$logname

#api specific unlocking
if [[ $api -ge 23 ]] ; then #android >=6
   adb shell am task lock stop >/dev/null 2>&1
   echo "App unlocked from screen."
elif [[ $api -eq 22 || $api -eq 21 ]] ; then #android 5 and 5.1
   #NO UNLOCK FOR android<6.0
   echo "No app unlock for API 21 and 22 for now."
   echo "Unlock app by holding BACK and RECENTS buttons."
fi

echo "---------------------------"

#check test result
if grep -q "CRASH" $PWD/$app/$logname ; then
   echo ' __    __
 \ \  / /
  \ \/ /   
   |  |    App crashed, test failed!
  / /\ \ 
 /_/  \_\
'
   echo "---------------------------" >> $PWD/$app/$logname
   echo "App was destroyed by monkey and crashed!" >> $PWD/$app/$logname
   mv $PWD/$app/$logname $PWD/$app/CRASH-$logname
   echo "Log saved to $PWD/$app: CRASH-"$logname

elif grep -q "RESPONDING" $PWD/$app/$logname ; then
   echo ' __    __
 \ \  / /
  \ \/ /   
   |  |    App frozen, test failed!
  / /\ \ 
 /_/  \_\
'
   echo "---------------------------" >> $PWD/$app/$logname
   echo "App was destroyed by monkey and stopped responding!" >> $PWD/$app/$logname
   mv $PWD/$app/$logname $PWD/$app/FREEZE-$logname
   echo "Log saved to $PWD/$app: FREEZE-"$logname

elif grep -q "Events" $PWD/$app/$logname ; then
   echo "        __
       / /
      / / 
 __  / /   App survived, test passed!
 \ \/ /   
  \__/    
"
   echo "---------------------------" >> $PWD/$app/$logname
   echo "App survived monkey madness!" >> $PWD/$app/$logname
   rm $PWD/$app/$logname
   if [ -d $PWD/$app ] ; then
      if [ $(ls $PWD/$app | wc -l) -lt 1 ] ; then
         rm -rf $PWD/$app
      fi
   fi

else
   echo "  ____ 
 |__  \ 
    ) |
   / /     Monkey was killed in action!
  |_|
  (_)  
"
   echo "---------------------------" >> $PWD/$app/$logname
   echo "Monkey was killed in action!" >> $PWD/$app/$logname
   mv $PWD/$app/$logname $PWD/$app/KILLED-$logname
   echo "Log saved to $PWD/$app: KILLED-"$logname
fi
echo "---------------------------"
}

############ TEST LOOP

run_loop()
{
#check/set number of loops
loops=0
if [ -z "$1" ] || (( $1<1 )) ; then
   until [[ $loops =~ ^-?[0-9]+$ ]] && [ $loops -gt 0 ]; do
      echo -n "Please specify number of tests: ";
      read loops;
   done
else
   echo "Test will run $1x.";
   loops=$1;
fi

#check/set number input events
events=0
if [ -z "$2" ] || (( $2<1 )); then
   until [[ $events =~ ^-?[0-9]+$ ]] && [ $events -gt 0 ]; do
      echo -n "Please specify number of input events: ";
      read events;
   done
else
   echo "Each test will include $2 input events.";
   events=$2;
fi

#run loop
for i in $(seq 1 $loops); do
   echo "Restarting $app"
   adb shell am force-stop $app >/dev/null 2>&1 #kill app to have fresh start
   adb shell monkey -p $app -c android.intent.category.LAUNCHER 1 >/dev/null 2>&1  #start app
   #wait for $app to appear
   sec=0;
   until [ $(adb shell dumpsys window windows | grep mCurrentFocus | cut -d'/' -f1 | rev | cut -d' ' -f1 | rev) == $app ] ; do 
      ((sec++)) ; 
      echo -ne "Waiting for launch $sec seconds..." "\r" ; 
      sleep 1 ; 
   done 
   echo
   #blaze that
   echo "---------------------------";
   echo "Running test #"$i
   run_test $events
done

#show results 
echo $loops "tests finished!"
if [ -d $PWD/$app ] ; then
   crashcount=$(ls $PWD/$app | grep CRASH | wc -l);
   freezecount=$(ls $PWD/$app | grep FREEZE | wc -l);
   killcount=$(ls $PWD/$app | grep -v 'FREEZE\|CRASH' | wc -l);
   if [ $crashcount -gt 0 ] ; then echo "App crashed: "$crashcount"x"; fi
   if [ $freezecount -gt 0 ] ; then echo "App freezed: "$freezecount"x"; fi
   if [ $killcount -gt 0 ] ; then echo "Monkey killed: "$killcount"x"; fi
   loops=$((loops - crashcount - freezecount - killcount))
   echo "App survived: "$loops"x"
   echo "Logs from failed tests are located at $PWD/$app"
   echo
else
   echo "App survived them all!" 
   echo  
fi
}

############ RUNTIME

##Check device
check_device

#Process arguments
if [ $# -gt 3 ]; then
   echo "Too much arguments, aborting..."
   exit 1
fi

args=$1+$2+$3;
arg1=0;

for arg in "$@"; do
   if [[ $arg =~ ^-?[0-9]+$ ]]; then
      if [ $arg1 -gt 0 ]; then
         arg2=$arg;
      else
         arg1=$arg;
      fi
   fi
done

#Start loop if args contain loop
if ([[ $args == *"--loop"* || $args == *"-l"* ]]); then
   run_loop $arg1 $arg2
else
   run_test $arg1 $arg2
fi
